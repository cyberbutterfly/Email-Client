{"version":3,"sources":["components/EmailLink.js","components/EmailSelectToggle.js","components/EmailFilterButtonGroup.js","components/EmailViewerModal.js","components/SimplePagination.js","App.js","serviceWorker.js","graphql/mock-data/data.js","graphql/schema-link.js","graphql/schema.js","graphql/state-schema-link.js","index.js"],"names":["StyledLink","styled","a","attrs","_ref","children","email","subject","_templateObject","_ref2","isRead","_ref3","EmailLink","props","react_default","createElement","Object","assign","href","SET_EMAIL_SELECT","gql","EmailSelectToggle_templateObject","EmailSelectToggle","_ref$email","id","isSelected","react_apollo_browser_umd","mutation","variables","setEmailSelect","reactstrap_es","type","checked","onChange","EmailFilterButtonGroup","value","values","vertical","map","filter","key","onClick","e","preventDefault","color","GET_EMAIL_VIEW","EmailViewerModal_templateObject","EmailViewerModal","emailId","toggle","query","client","loading","error","data","JSON","stringify","isOpen","body","SimplePagination","page","pages","aria-label","disabled","previous","next","UPDATE_EMAIL","App_templateObject","GET_EMAIL_LIST","_templateObject2","MarkSelectedAsReadButton","selectedEmails","updateEmail","forEach","length","credits","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","viewEmailId","limit","state","_this2","message","refetchQueries","xs","sm","App_MarkSelectedAsReadButton","emails","className","style","padding","slice","check","components_EmailLink","size","offset","Math","ceil","_ref4","Component","Boolean","window","location","hostname","match","mock_data_data","toConsumableArray","Array","keys","i","casual","uuid","sentence","text","boolean","resolvers","Query","_","_ref$filter","find","Mutation","objectWithoutProperties","findIndex","concat","objectSpread","schema","makeExecutableSchema","typeDefs","schema_link","SchemaLink","GET_EMAIL","state_schema_link_templateObject","Email","cache","fragment","readFragment","writeFragment","InMemoryCache","dataIdFromObject","object","stateLink","withClientState","defaults","link","ApolloLink","from","mockLink","ApolloClient","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.559b56cf.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledLink = styled.a.attrs(({ email }) => ({\n  children: email.subject,\n}))`\n  color: ${({ email }) => (email.isRead ? 'black' : 'green')};\n  font-weight: ${({ email }) => (email.isRead ? 'normal' : 'bold')};\n`\n\nconst EmailLink = props => (\n  <StyledLink href=\"#\" children={props.email.subject} {...props} />\n)\n\nexport default EmailLink\n","import React from 'react'\nimport { Input } from 'reactstrap'\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nconst SET_EMAIL_SELECT = gql`\n  mutation setEmailSelect($id: ID!, $isSelected: Boolean!) {\n    setEmailSelect(id: $id, isSelected: $isSelected) @client\n  }\n`\n\nexport default ({ email: { id, isSelected } }) => (\n  <Mutation\n    mutation={SET_EMAIL_SELECT}\n    variables={{ id, isSelected: !isSelected }}\n  >\n    {setEmailSelect => (\n      <Input type=\"checkbox\" checked={isSelected} onChange={setEmailSelect} />\n    )}\n  </Mutation>\n)\n","import React from 'react'\nimport { Button, ButtonGroup } from 'reactstrap'\n\nexport default ({ onChange, value, values }) => (\n  <ButtonGroup vertical>\n    {values.map(filter => (\n      <Button\n        key={filter}\n        onClick={e => {\n          e.preventDefault()\n          onChange(filter)\n        }}\n        color={value === filter ? 'success' : 'primary'}\n      >\n        {filter}\n      </Button>\n    ))}\n  </ButtonGroup>\n)\n","import React from 'react'\nimport { Modal, ModalHeader, ModalBody, Card } from 'reactstrap'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\n\nconst GET_EMAIL_VIEW = gql`\n  query emailById($emailId: ID!) {\n    email(id: $emailId) {\n      subject\n      body\n    }\n  }\n`\n\nexport default ({ filter, emailId, toggle }) => (\n  <Query query={GET_EMAIL_VIEW} variables={{ emailId }}>\n    {({ client, loading, error, data }) => {\n      if (loading) return <p>Loading...</p>\n      if (error) return <p>Error :( {JSON.stringify(error)}</p>\n      return (\n        <Modal isOpen={true}>\n          <ModalHeader toggle={toggle}>\n            {emailId !== null && data.email.subject}\n          </ModalHeader>\n          <ModalBody>\n            <Card>{emailId !== null && data.email.body}</Card>\n          </ModalBody>\n        </Modal>\n      )\n    }}\n  </Query>\n)\n","import React from 'react'\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap'\n\nexport default ({ page, pages, onChange }) => {\n  return (\n    <Pagination aria-label=\"Email navigation\">\n      <PaginationItem disabled={page === 0}>\n        <PaginationLink\n          previous\n          href=\"#\"\n          onClick={() => onChange({ page: page - 1 })}\n        />\n      </PaginationItem>\n      <PaginationItem disabled>\n        <PaginationLink>{page + 1}</PaginationLink>\n      </PaginationItem>\n      <PaginationItem disabled={page >= pages - 1}>\n        <PaginationLink\n          next\n          href=\"#\"\n          onClick={() => onChange({ page: page + 1 })}\n        />\n      </PaginationItem>\n    </Pagination>\n  )\n}\n","import React, { Component } from 'react'\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  FormGroup,\n  Label,\n  Card,\n  CardTitle,\n  CardBody,\n} from 'reactstrap'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport EmailLink from './components/EmailLink'\nimport EmailSelectToggle from './components/EmailSelectToggle'\nimport EmailFilterButtonGroup from './components/EmailFilterButtonGroup'\nimport EmailViewerModal from './components/EmailViewerModal'\nimport SimplePagination from './components/SimplePagination'\n\nconst UPDATE_EMAIL = gql`\n  mutation updateEmail($id: ID, $isRead: Boolean) {\n    updateEmail(id: $id, isRead: $isRead)\n  }\n`\n\nconst GET_EMAIL_LIST = gql`\n  query emails($filter: String!) {\n    emails(filter: $filter) {\n      id\n      subject\n      isRead\n      isSelected @client\n    }\n  }\n`\n\nconst MarkSelectedAsReadButton = ({ selectedEmails, filter, updateEmail }) => (\n  <Button\n    onClick={() =>\n      selectedEmails.forEach(({ id }) =>\n        updateEmail({\n          variables: { id, isRead: true },\n        })\n      )\n    }\n    disabled={selectedEmails.length === 0}\n  >\n    Mark {selectedEmails.length ? selectedEmails.length : ''} as Read\n  </Button>\n)\n\nconst credits = (\n  <Card>\n    <CardTitle>Email Client Demo by Jimmy Chan</CardTitle>\n    <CardBody>      \n      <p>\n        Implemented with reactstrap (react + bootstrap), styled-components, and\n        apollo-boost. Apollo client configured for local state management. Mock\n        server using graph-ql + casual-browserify.\n      </p>\n    </CardBody>\n  </Card>\n)\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.limit = 5\n    this.state = {\n      filter: 'ALL',\n      viewEmailId: null,\n      page: 0,\n    }\n  }\n\n  // EmailViewerModal toggle\n  toggle = () => {\n    this.setState({ viewEmailId: null })\n  }\n\n  render() {\n    return (\n      // Query filered list of emails\n      <Query query={GET_EMAIL_LIST} variables={{ filter: this.state.filter }}>\n        {({ loading, error, data }) => {\n          if (loading) return <p>Loading...</p>\n          if (error) return <p>Error: {error.message}</p>\n\n          // Mutation updates email isRead flag\n          return (\n            <Mutation\n              mutation={UPDATE_EMAIL}\n              refetchQueries={[\n                {\n                  query: GET_EMAIL_LIST,\n                  variables: { filter: this.state.filter },\n                },\n              ]}\n            >\n              {updateEmail => (\n                <Container>\n                  {this.state.viewEmailId !== null && (\n                    <EmailViewerModal\n                      filter={this.state.filter}\n                      emailId={this.state.viewEmailId}\n                      toggle={() => {\n                        updateEmail({\n                          variables: {\n                            id: this.state.viewEmailId,\n                            isRead: true,\n                          },\n                        })\n                        this.toggle()\n                      }}\n                    />\n                  )}\n                  <Row>\n                    <Col xs={12} sm={6}>\n                      <Card>\n                        <CardTitle>Filter: </CardTitle>\n                        <CardBody>\n                          <Row>\n                            <Col>\n                              <EmailFilterButtonGroup\n                                value={this.state.filter}\n                                values={['ALL', 'UNREAD', 'READ']}\n                                onChange={filter =>\n                                  this.setState({ filter, page: 0 })\n                                }\n                              />\n                            </Col>\n                            <Col>\n                              <MarkSelectedAsReadButton\n                                selectedEmails={data.emails.filter(\n                                  e => e.isSelected\n                                )}\n                                filter={this.state.filter}\n                                updateEmail={updateEmail}\n                              />\n                            </Col>\n                          </Row>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                    <Col xs={12} sm={6}>\n                      {credits}\n                    </Col>\n                  </Row>\n                  <Row className=\"EmailList\">\n                    <Col>\n                      <Card style={{ padding: '1rem' }}>\n                        {data.emails\n                          .slice(\n                            this.state.page * this.limit,\n                            this.state.page * this.limit + this.limit\n                          )\n                          .map(email => (\n                            <Card key={email.id}>\n                              <CardBody>\n                                <FormGroup check>\n                                  <Label check>\n                                    <EmailSelectToggle email={email} />\n                                    <EmailLink\n                                      email={email}\n                                      onClick={() =>\n                                        // Launch EmailViewModal\n                                        this.setState({ viewEmailId: email.id })\n                                      }\n                                    />\n                                  </Label>\n                                </FormGroup>\n                              </CardBody>\n                            </Card>\n                          ))}\n                      </Card>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col xs={{ size: 2, offset: 5 }}>\n                      <SimplePagination\n                        page={this.state.page}\n                        pages={Math.ceil(data.emails.length / this.limit)}\n                        onChange={({ page }) => this.setState({ page })}\n                      />\n                    </Col>\n                  </Row>\n                </Container>\n              )}\n            </Mutation>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import casual from 'casual-browserify'\n\nexport default {\n  emails: [...Array(17).keys()].map(i => ({\n    id: casual.uuid,\n    subject: casual.sentence,\n    body: casual.text,\n    isRead: i < 3 ? false : casual.boolean,\n  })),\n}\n","import { makeExecutableSchema } from 'graphql-tools'\n// import { addMockFunctionsToSchema } from 'graphql-tools'\nimport { SchemaLink } from 'apollo-link-schema'\nimport data from './mock-data/data'\nimport typeDefs from './schema.js' // TODO\n\nconst resolvers = {\n  Query: {\n    emails: (_, { filter = 'ALL' }) => {\n      return data.emails.filter(\n        e =>\n          filter === 'ALL' ||\n          (filter === 'READ' && e.isRead) ||\n          (filter === 'UNREAD' && !e.isRead)\n      )\n    },\n    email: (_, { id }) => data.emails.find(e => e.id === id),\n  },\n  Mutation: {\n    updateEmail: (_, { id, ...props }) => {\n      const i = data.emails.findIndex(e => e.id === id)\n      if (i >= 0) {\n        data.emails = [\n          ...data.emails.slice(0, i),\n          { ...data.emails[i], ...props },\n          ...data.emails.slice(i + 1),\n        ]\n      }\n      return data.emails[i]\n    },\n  },\n}\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n})\n\n//addMockFunctionsToSchema({ mocks, schema })\nexport default new SchemaLink({ schema })\n","export default `\n  type Email {\n    id: ID!\n    subject: String!\n    body: String!\n    isRead: Boolean!\n  }\n\n  type Query {\n    emails(filter: String): [Email]!\n    email(id: ID!): Email!\n  }\n\n   type Mutation {\n     updateEmail(id: ID!, isRead: Boolean): Email!\n   }\n`\n","import gql from 'graphql-tag'\n\nexport const defaults = {\n  filter: 'ALL',\n  page: 0,\n  viewEmailId: null,\n  selectedEmails: [],\n}\n\n// const id = `Email:${id}`\nconst GET_EMAIL = gql`\n  fragment completeEmail on Email {\n    isSelected\n  }\n`\n\nexport const resolvers = {\n  // add client side attribute to support UI email selection\n  Email: {\n    isSelected: () => {\n      return false\n    },\n  },\n  Mutation: {\n    // sets email (with id) isSelected attribute\n    setEmailSelect: (_, { id, isSelected, ...rest }, { cache }) => {\n      const fragment = GET_EMAIL\n      const email = cache.readFragment({ fragment, id })\n      const data = { ...email, isSelected }\n\n      cache.writeFragment({ fragment, id, data })\n      return null\n    },\n  },\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport { ApolloProvider } from 'react-apollo'\n// See https://github.com/apollographql/apollo-client/issues/3639\nimport { ApolloClient } from 'apollo-boost'\nimport { ApolloLink } from 'apollo-link'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { withClientState } from 'apollo-link-state'\n\n// import link from './graphql/http-link'  // Real server connection\nimport mockLink from './graphql/schema-link' // Mock server for testing\nimport { defaults, resolvers } from './graphql/state-schema-link' // Mock server for testing\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object.id || null,\n})\n\nconst stateLink = withClientState({\n  cache,\n  defaults,\n  resolvers,\n})\n\nconst link = ApolloLink.from([stateLink, mockLink])\n\nconst client = new ApolloClient({\n  link,\n  cache,\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}